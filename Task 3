HTML:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Music Player</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>

<div class="music-player">
  <h2 id="title">song title</title></h2>
  <h3 id="artist">Artist Name</h3>

  <audio id="audio" preload="metadata">
    <source src="song.mp3" type="audio/mp3">
    Your browser does not support the audio element.
  </audio>

  <div class="controls">
    <button id="play">‚ñ∂Ô∏è</button>
    <button id="pause">‚è∏Ô∏è</button>
  </div>

  <div class="progress-container" id="progress-container">
    <div class="progress" id="progress"></div>
  </div>

  <div class="time">
    <span id="current-time">0:00</span> / <span id="duration">0:00</span>
  </div>

  <div class="volume-control">
    <label for="volume">üîä Volume:</label>
    <input type="range" id="volume" min="0" max="1" step="0.01">
  </div>
</div>

<script src="task3.js"></script>
</body>
</html>

JS:
const audio = document.getElementById('audio');
const playBtn = document.getElementById('play');
const pauseBtn = document.getElementById('pause');
const progress = document.getElementById('progress');
const progressContainer = document.getElementById('progress-container');
const currentTimeEl = document.getElementById('current-time');
const durationEl = document.getElementById('duration');
const volumeSlider = document.getElementById('volume');
const title = document.getElementById('title');
const artist = document.getElementById('artist');


title.textContent = ' Song';
artist.textContent = 'Artist';


playBtn.addEventListener('click', () => {
  audio.play();
});


pauseBtn.addEventListener('click', () => {
  audio.pause();
});


audio.addEventListener('timeupdate', updateProgress);

function updateProgress() {
  if (audio.duration) {
    const progressPercent = (audio.currentTime / audio.duration) * 100;
    progress.style.width = `${progressPercent}%`;

   
    currentTimeEl.textContent = formatTime(audio.currentTime);
    durationEl.textContent = formatTime(audio.duration);
  }
}

function formatTime(seconds) {
  const mins = Math.floor(seconds / 60);
  const secs = Math.floor(seconds % 60).toString().padStart(2, '0');
  return `${mins}:${secs}`;
}


progressContainer.addEventListener('click', (e) => {
  const width = progressContainer.clientWidth;
  const clickX = e.offsetX;
  const duration = audio.duration;

  audio.currentTime = (clickX / width) * duration;
});


volumeSlider.addEventListener('input', () => {
  audio.volume = volumeSlider.value;
});


volumeSlider.value = 0.5;
audio.volume = 0.5;
